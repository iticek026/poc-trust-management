import { TrustConstants, AuthorityConstants, TrustConfig } from "../jsonConfig/schema";

type EnvConstants = {
  CELL_SIZE: number;
};

type RobotConstants = {
  DETECTION_RADIUS: number;
};

type ConstantsType = TrustConstants &
  EnvConstants &
  RobotConstants &
  AuthorityConstants &
  TrustConfig & { TIMEOUT: number | null };
export class Constants {
  INIT_TRUST_VALUE!: number;
  DIRECT_TRUST_WEIGHT!: number;
  INDIRECT_TRUST_WEIGHT!: number;
  AUTHORITY_TRUST_WEIGHT!: number;
  LEADER_TRUST_WEIGHT!: number;
  TRUSTED_PEERS_WEIGHT!: number;
  OTHER_PEERS_WEIGHT!: number;
  COMMUNICATION_TRUST_WEIGHT!: number;
  OBSERVATION_TRUST_WEIGHT!: number;
  PRESENT_TRUST_WEIGHT!: number;
  PAST_TRUST_WEIGHT!: number;
  STATE_OF_TRUSTOR_WEIGHT!: number;
  EXPLORED_AREA_WEIGHT!: number;
  WAS_OBJECT_FOUND_WEIGHT!: number;
  DATA_SENSITIVITY_WEIGHT!: number;
  CELL_SIZE!: number;
  DETECTION_RADIUS!: number;
  AUTHORITY_DISCONNECT_THRESHOLD!: number;
  AUTHORITY_ACCEPT_THRESHOLD!: number;
  isTrustErosionEnabled!: boolean;
  enableTrustBasedBroadcasting!: boolean;
  isTrustActive!: boolean;
  TIMEOUT: number | null = null;
  AUTHORITY_PROPAGATION_WEIGHT!: number;
  ROBOT_PROPAGATION_WEIGHT!: number;
  TRUST_BASED_BROAD_THRESHOLD!: number;
  constructor() {}

  setUp({
    INIT_TRUST_VALUE,
    DIRECT_TRUST_WEIGHT,
    INDIRECT_TRUST_WEIGHT,
    AUTHORITY_TRUST_WEIGHT,
    LEADER_TRUST_WEIGHT,
    TRUSTED_PEERS_WEIGHT,
    OTHER_PEERS_WEIGHT,
    COMMUNICATION_TRUST_WEIGHT,
    OBSERVATION_TRUST_WEIGHT,
    PRESENT_TRUST_WEIGHT,
    PAST_TRUST_WEIGHT,
    STATE_OF_TRUSTOR_WEIGHT,
    EXPLORED_AREA_WEIGHT,
    WAS_OBJECT_FOUND_WEIGHT,
    DATA_SENSITIVITY_WEIGHT,
    CELL_SIZE,
    DETECTION_RADIUS,
    AUTHORITY_DISCONNECT_THRESHOLD,
    AUTHORITY_ACCEPT_THRESHOLD,
    trustErosionEnabled,
    enableTrustBasedBroadcasting,
    TIMEOUT,
    AUTHORITY_PROPAGATION_WEIGHT,
    ROBOT_PROPAGATION_WEIGHT,
    TRUST_BASED_BROAD_THRESHOLD,
  }: ConstantsType) {
    this.INIT_TRUST_VALUE = INIT_TRUST_VALUE;
    this.DIRECT_TRUST_WEIGHT = DIRECT_TRUST_WEIGHT;
    this.INDIRECT_TRUST_WEIGHT = INDIRECT_TRUST_WEIGHT;
    this.AUTHORITY_TRUST_WEIGHT = AUTHORITY_TRUST_WEIGHT;
    this.LEADER_TRUST_WEIGHT = LEADER_TRUST_WEIGHT;
    this.TRUSTED_PEERS_WEIGHT = TRUSTED_PEERS_WEIGHT;
    this.OTHER_PEERS_WEIGHT = OTHER_PEERS_WEIGHT;
    this.COMMUNICATION_TRUST_WEIGHT = COMMUNICATION_TRUST_WEIGHT;
    this.OBSERVATION_TRUST_WEIGHT = OBSERVATION_TRUST_WEIGHT;
    this.PRESENT_TRUST_WEIGHT = PRESENT_TRUST_WEIGHT;
    this.PAST_TRUST_WEIGHT = PAST_TRUST_WEIGHT;
    this.STATE_OF_TRUSTOR_WEIGHT = STATE_OF_TRUSTOR_WEIGHT;
    this.EXPLORED_AREA_WEIGHT = EXPLORED_AREA_WEIGHT;
    this.WAS_OBJECT_FOUND_WEIGHT = WAS_OBJECT_FOUND_WEIGHT;
    this.DATA_SENSITIVITY_WEIGHT = DATA_SENSITIVITY_WEIGHT;
    this.CELL_SIZE = CELL_SIZE;
    this.DETECTION_RADIUS = DETECTION_RADIUS;
    this.AUTHORITY_DISCONNECT_THRESHOLD = AUTHORITY_DISCONNECT_THRESHOLD;
    this.AUTHORITY_ACCEPT_THRESHOLD = AUTHORITY_ACCEPT_THRESHOLD;
    this.isTrustErosionEnabled = trustErosionEnabled;
    this.enableTrustBasedBroadcasting = enableTrustBasedBroadcasting;
    this.isTrustActive = DIRECT_TRUST_WEIGHT > 0 || INDIRECT_TRUST_WEIGHT > 0;
    this.TIMEOUT = TIMEOUT;
    this.AUTHORITY_PROPAGATION_WEIGHT = AUTHORITY_PROPAGATION_WEIGHT;
    this.ROBOT_PROPAGATION_WEIGHT = ROBOT_PROPAGATION_WEIGHT;
    this.TRUST_BASED_BROAD_THRESHOLD = TRUST_BASED_BROAD_THRESHOLD;
  }
}

export const ConstantsInstance = new Constants();
