@startuml
skinparam classAttributeIconSize 0
skinparam linetype ortho
set separator ::

class TrustManagementFramework::TrustService {
  - trustHistory: Map<number, TrustRecord>
  - authority: Authority
  - leader: LeaderRobot | null
  - robot: Robot
  - trustedPeers: Set<number>
  --
  + reportToAuthority(peerId: number, trust: number): void
  + getReputationFromAuthority(robotId: number): number
  + getActiveRobotFromAuthority(): number
  + makeTrustDecision(peerId: number, context: Context, updateTrust: boolean): boolean
}

abstract class TrustRobot extends Robot {
  # trustService: TrustService | undefined
  - observations: Map<number, boolean[]>
  --
  + assignTrustService(trustService: TrustService): void
  + getTrustService(): TrustService
  + addObservation(robotId: number, observation: boolean): void
}

abstract class Robot {

}

class TrustManagementFramework::DirectTrust {
    + {static} calculate(): TrustCalculationData 
}

class TrustManagementFramework::IndirectTrust {
    + {static} calculate(): TrustCalculationData
}

class TrustManagementFramework::ContextInformation {
    + getThreshold(): number
}

class RegularRobot extends TrustRobot {

}

class MaliciousRobot extends TrustRobot {

}

class LeaderRobot extends RegularRobot {

}

abstract class TrustManagementFramework::TrustValue {
  + trustScore: number
  + lastUpdate: Date
  --
  abstract updateTrust(trust: number): void;
}

class TrustManagementFramework::Authority {
  - reputations: Map<number, ReputationRecord>
  - activeRobots: Set<number>;
  --
  + getReputation(robotId: number): number
  + getActiveRobots(): { id: number; reputation: number }[]
  + receiveTrustUpdate(fromRobotId: number, toRobotId: number, trustValue: number): void
}

class TrustManagementFramework::TrustRecord extends TrustManagementFramework::TrustValue {
  + interactions: Interaction[];
  --
  + addInteraction(interaction: Interaction): void
  + updateTrust(trust: number): void
}

class TrustManagementFramework::ReputationRecord extends TrustManagementFramework::TrustValue {
  + updateTrust(trust: number): void
}

class TrustDataProvider {
    - trustServices: TrustService[]
    - authority: Authority
    --
    + getTrustData(): TrustData[]
}


package UI <<Node>> {

}

TrustService -- DirectTrust
TrustService -- IndirectTrust 
TrustService -- ContextInformation 
TrustService -u-> TrustRecord

TrustRobot *-- TrustService
Authority -u-> ReputationRecord 

UI <-- TrustDataProvider : provide trust data
TrustDataProvider "1" o-- "*" TrustService
TrustService "1" o-u- "1" Authority


@enduml
