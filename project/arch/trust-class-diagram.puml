@startuml
skinparam classAttributeIconSize 0

' Enum for StateManagement
enum StateManagement {
  IDLE
  SEARCHING
  TRANSPORTING
  CALIBRATING_POSITION
  PLANNING
  OBSTACLE_AVOIDANCE
}

class Robot {
  - id: int
  - role: String
  - state: StateManagement
  - movementController: MovementController
  - detectionController: DetectionController
  - communicationController: CommunicationController
  --
  + Robot(id: int, role: String)
  + move(): void
  + detect(): void
  + communicate(): void
  + performTask(): void
  + updateState(newState: StateManagement): void
}

class MovementController {
  --
  + moveTo(position: Coordinates): void
  + stop(): void
}

class DetectionController {
  --
  + detectObstacles(): Obstacle[]
  + detectRobots(): Robot[]
}

class CommunicationController {
  --
  + sendMessage(receiverId: int, content: MessageContent): void
  + broadcastMessage(content: MessageContent): void
  + receiveMessage(message: Message): void
}

class TrustRobot {
  - trustService: TrustService
  --
  + TrustRobot(id: int, role: String)
  + evaluateTrust(peerId: int): float
  + updateTrust(interaction: Interaction): void
  + receiveTrustInfo(peerId: int, trustInfo: Trust): void
  + ageTrustValues(): void
  + getContextThreshold(): float
  + processMessageContent(content: MessageContent): void
}

class TrustService {
  - trustHistory: Map<int, Interaction[]>
  --
  + evaluateTrust(peerId: int): float
  + updateTrust(interaction: Interaction): void
  + getInteractions(peerId: int): Interaction[]
  + ageTrustValues(): void
  + getContextThreshold(): float
  + receiveTrustInfo(peerId: int, trustInfo: Trust): void
  + interactWithAuthority(robotId: int): void
}

class LeaderRobot {
  --
  + LeaderRobot(id: int)
  + assignTasks(): void
  + makeStrategicDecisions(): void
}

abstract class Trust {
  + value: float
  + timestamp: Date
  --
  + Trust()
  + calculate(): float
  + age(): void
}

class DirectTrust {
  --
  + calculate(): float
}

class IndirectTrust {
  --
  + calculate(): float
}

class ContextInformation {
  - contextData: any
  --
  + ContextInformation(contextData: any)
  + getThreshold(): float
  + getContextDetails(): any
}

class Interaction {
  + fromRobotId: int
  + toRobotId: int
  + outcome: bool
  + timestamp: Date
  + context: ContextInformation
  --
  + Interaction(fromRobotId: int, toRobotId: int, outcome: bool, context: ContextInformation)
}

class Message {
  + senderId: int
  + receiverId: int
  + content: MessageContent
  + timestamp: Date
  --
  + Message(senderId: int, receiverId: int, content: MessageContent)
}

' Additional Classes
class Coordinates {
  + x: float
  + y: float
}

class Obstacle {
  + id: int
  + position: Coordinates
}

class MessageContent {
  + type: String
  + data: any
}

' Relationships
Robot <|-- TrustRobot
TrustRobot <|-- LeaderRobot
Trust <|-- DirectTrust
Trust <|-- IndirectTrust

Robot o-- MovementController
Robot o-- DetectionController
Robot o-- CommunicationController

TrustRobot o-- TrustService
TrustService "1" o-- "*" Interaction : trustHistory

Interaction o-- ContextInformation

TrustService ..> Authority : interacts with
TrustService ..> Interaction : updates trust based on

CommunicationController ..> TrustRobot : uses trustService
CommunicationController ..> Message : uses

DirectTrust ..> Interaction : calculates from

@enduml
