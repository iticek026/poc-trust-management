title SwarmSimulator

@startuml SwarmSimulator

class Simulation {
    environment: Environment
    swarm: Swarm
    trustManagementSystem: TrustManagementSystem
    timeFromStart: Time
    simulate()
    simulateWithCA(ca: CentralAuthority)
}

class Experience {
    timestamp: Time
    trustee: TrustRobot
    urgency: Float
    trustChange: Float
}

note top of Experience: Urgency is value from 0 to 1 refering to dependency \non the trustee at that time to complete his task.


class CentralAuthority {
    communication: CACommunicationClient
    swarmRobots: Swarm
    trustManagement: TrustManagementSystem
    allRobotsHistory: Map<robotId, Experience[]>
}

'===========================START COMMUNICATION===========================

interface ICommunication {
    receive()
    send(Object data)
}

class CentralAuthorityCommunication implements ICommunication {
    receive()
    send(Object data)
}


class Peer2PeerCommunication implements ICommunication {
    Integer radius
    receive()
    send(Object data)
}

interface ICommunicationFactory {
    getP2PCommunicator(): Peer2PeerCommunication
    getCACommunicator(): CentralAuthorityCommunication
}

class RobotCommunicationFactory implements ICommunicationFactory {
    getP2PCommunicator(): Peer2PeerCommunication
    getCACommunicator(): CentralAuthorityCommunication
}

class CACommunicationFactory implements ICommunicationFactory {
    getP2PCommunicator(): Peer2PeerCommunication
    getCACommunicator(): CentralAuthorityCommunication
}

class RobotCommunicationClient {
    factoryCommunication: ICommunicationFactory
    useCA(): CentralAuthorityCommunication
    useP2P(): Peer2PeerCommunication
}

class CACommunicationClient {
    factoryCommunication: ICommunicationFactory
    useCA(): CentralAuthorityCommunication
}

' interface ICommunicationClient {
'     getP2PCommunication(): Peer2PeerCommunication
'     getCACommunication(): CentralAuthorityCommunication
' }

CentralAuthority --> CACommunicationClient : uses
CACommunicationClient --> ICommunicationFactory


Robot --> RobotCommunicationClient 
RobotCommunicationClient --> ICommunicationFactory

RobotCommunicationFactory --> CentralAuthorityCommunication
CACommunicationFactory -->CentralAuthorityCommunication

RobotCommunicationFactory --> Peer2PeerCommunication
CACommunicationFactory --> Peer2PeerCommunication

'===========================END COMMUNICATION===========================

class TrustRobot extends Robot {
    reputation: Reputation
    pastExperience: Experience[]
    trustManagementSystem: TrustManagementSystem
    getPastExperienceWithRobot(robotId: Integer): Experience[]
    pushPastExperince()
    -sendDataToCA()
}

TrustRobot "1" --- "1..*" Experience
TrustRobot *-- TrustManagementSystem

class Robot {
    id: Integer 
    coordinates: Coordinates 
    communication: RobotCommunicationClient 
    batteryLevel: Float
    health: Float
    getCoordinates(): Coordinates
    checkCommunicationProximity(): Robots[]
    move()
    observe()
    getDistanceFromBase()
}

note top of Robot: Battery level and Health fields serve for \nvulnerability and reparability calculations 


class Swarm {
    robots: Robot[] 
}

class Coordinates {
    x: Integer 
    y: Integer 
}


enum EnvironmentObjectType {
    OBSTACLE
    COLLECTABLE
    BASE
}

class EnvironmentObject {
    dimensions: Coordinates[] 
    type: EnvironmentObjectType 
    collapsible: bool
}

class Goal extends EnvironmentObject
class Base extends EnvironmentObject

class Environment {
    goal: Goal 
    base: Base 
    height: Integer 
    width: Integer 
}

class DirectTrust {
    evaluateCurrentDirectTrust()
}

class IndirectTrust {
    getTrustOpinion()
    getRobotReputation(robotId: Integer): Reputation
}

class ContextualInformation

' Call proxy function in js for logging every robot actions
class TrustManagementSystem {
    directTrust: DirectTrust 
    indirectTrust: IndirectTrust 
    contextualInformation: ContextualInformation 

    evaluateCurrentInteraction()
}

note left of TrustManagementSystem::"evaluateCurrentInteraction()"
Used for calculation final trust 
using direct and indirect trust.
end note

class CentralAuthorityTrustManagementSystem extends TrustManagementSystem {
    getAllRobotTrustScore(): Float[]

}

Simulation *-- TrustManagementSystem
Simulation *-- Environment
Simulation *-- Swarm

Swarm "1" -- "1..*" Robot

Environment "1" -- "1" Goal
Environment "1" -- "1" Base

Robot "1" ---- "1" Coordinates

EnvironmentObject "1" -- "1..*" Coordinates
EnvironmentObject -- EnvironmentObjectType

TrustManagementSystem -- DirectTrust
TrustManagementSystem -- IndirectTrust
TrustManagementSystem -- ContextualInformation

CentralAuthority o-- Swarm
CentralAuthority o-- CentralAuthorityTrustManagementSystem

@enduml 